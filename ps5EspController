#include <ps5Controller.h>  // Include PS5 controller library
bool stopBit = 0;

void setup() {
    Serial.begin(19200);    // Initialize Serial (connected to RX0)
    Serial2.begin(19200, SERIAL_8N1, 16, 17);  // Initialize UART communication on Serial2 (RX2 on PIN 16, TX2 on PIN 17), baud rate set to 19200
  
    // Initialize PS5 controller connection using its MAC address
    ps5.begin("ac:36:1b:e1:fd:05");
    Serial.println("Ready to connect to PS5 controller...");
}

void loop() {
    if (ps5.isConnected()) {
        // Use left joystick (forward/backward movement)
        if (stopBit == 0) {
            stopBit = ps5.Cross();
        }
        int yValue = ps5.LStickY();  // Get the left stick Y-axis value for movement control
        int xValue = ps5.LStickX();  // Get the left stick X-axis value for movement control

        // Map X and Y values to 2-bit data with a sign bit
        uint8_t xMapped = (abs(xValue) >> 6) & 0b11;  // Map from -128 to 127 into 0 to 3 (2 bits)
        uint8_t yMapped = (abs(yValue) >> 6) & 0b11;  // Map from -128 to 127 into 0 to 3 (2 bits)

        // Add sign bit: 0 for positive, 1 for negative
        uint8_t xSign = (xValue < 0) ? 1 : 0;
        uint8_t ySign = (yValue < 0) ? 1 : 0;

        // Combine X and Y into a single 6-bit data: [xSign, xMapped, ySign, yMapped]
        uint8_t combinedData = (xSign << 5) | (xMapped << 3) | (ySign << 2) | yMapped | stopBit;

        // Send the combined data through Serial2
        Serial2.write(combinedData);
        Serial2.flush();  // Ensure transmission is complete
        
        // Debugging output
        Serial.print("Sent combined data: ");
        Serial.println(combinedData, BIN);

        delay(100);  // Delay to prevent sending commands too frequently
    }

    // Check for received data on Serial2 (RX2)
    if (Serial2.available() > 0) {
        char receivedChar = Serial2.read();
        // Debugging: Print received data as character and binary format
        Serial.print("Received data: ");
        Serial.println(receivedChar);
        
        Serial.print("Received data in binary: ");
        printBinary(receivedChar);
        Serial.println();  // New line for readability
    }

    delay(100);  // Delay to prevent sending commands too frequently
}

void printBinary(char c) {
    for (int i = 7; i >= 0; i--) {
        Serial.print((c >> i) & 1);
    }
}
